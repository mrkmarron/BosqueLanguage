//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the fluent core language
namespace NSCore;

//Helpers for specialized List<Int>
hidden entity IntList provides Object {
    hidden recursive static _sum(l: List<Int>, idx: Int, acc: Int): Int {
        if(idx == List<Int>::_size(l)) {
            return acc;
        }
        else {
            var val = List<Int>::_unsafe_get(l, idx);
            return IntList::_sum[recursive](l, idx + 1, acc + val);
        }
    }
}

//<summary>A List entity.</summary>
entity List<T> provides Object, PODType when T grounded PODType, APIType when T grounded APIType {
    hidden static _size(l: List<T>): Int # list_size
    hidden static _unsafe_get(l: List<T>, i: Int): T # list_unsafe_get
    hidden static _unsafe_add(l: List<T>, v: T): List<T> # list_unsafe_add
    hidden static _unsafe_set(l: List<T>, i: Int, v: T): List<T> # list_unsafe_set

    hidden recursive static _exists(l: List<T>, idx: Int, p: recursive? fn(_: T) -> Bool): Bool {
        if(idx == List<T>::_size(l)) {
            return false;
        }
        else {
            var val = List<T>::_unsafe_get(l, idx);
            if(p[recursive?](val)) {
                return true;
            }
            else {
                return List<T>::_exists[recursive](l, idx + 1, p);
            }
        }
    }

    hidden recursive static _all(l: List<T>, idx: Int, p: recursive? fn(_: T) -> Bool): Bool {
        if(idx == List<T>::_size(l)) {
            return true;
        }
        else {
            var val = List<T>::_unsafe_get(l, idx);
            if(!p[recursive?](val)) {
                return false;
            }
            else {
                return List<T>::_all[recursive](l, idx + 1, p);
            }
        }
    }

    hidden recursive static _filter(l: List<T>, idx: Int, lp: List<T>, p: recursive? fn(_: T) -> Bool): List<T> {
        if(idx == List<T>::_size(l)) {
            return lp;
        }
        else {
            var val = List<T>::_unsafe_get(l, idx);
            if(p[recursive?](val)) {
                return List<T>::_filter[recursive](l, idx + 1, List<T>::_unsafe_add(lp, val), p);
            }
            else {
                return List<T>::_filter[recursive](l, idx + 1, lp, p);
            }
        }
    }
    
    hidden recursive static _ofType<U>(l: List<T>, idx: Int, lp: List<U>): List<U> {
        if(idx == List<T>::_size(l)) {
            return lp;
        }
        else {
            var val = List<T>::_unsafe_get(l, idx);
            if(val->is<U>()) {
                return List<T>::_ofType<U>[recursive](l, idx + 1, List<U>::_unsafe_add(lp, val));
            }
            else {
                return List<T>::_ofType<U>[recursive](l, idx + 1, lp);
            }
        }
    }

    hidden recursive static _map<U>(l: List<T>, idx: Int, lp: List<U>, f: recursive? fn(_: T) -> U): List<U> {
        if(idx == List<T>::_size(l)) {
            return lp;
        }
        else {
            var val = f[recursive?](List<T>::_unsafe_get(l, idx));
            return List<T>::_map<U>[recursive](l, idx + 1, List<U>::_unsafe_add(lp, val), f);
        }
    }

    method size(): Int {
        return List<T>::_size(this);
    }
    
    method empty(): Bool {
        return List<T>::_size(this) == 0;
    }

    method get(idx: Int): T {
        check 0 <= idx && idx < List<T>::_size(this);

        return List<T>::_unsafe_get(this, idx);
    }

    method push(v: T): List<T> {
        return List<T>::_unsafe_add(this, v);
    }

    method set(idx: Int, v: T): List<T> {
        check 0 <= idx && idx < List<T>::_size(this);

        return List<T>::_unsafe_set(this, idx, v);
    }

    recursive? method exists(p: recursive? fn(_: T) -> Bool): Bool {
        return List<T>::_exists[recursive](this, 0, p);
    }

    recursive? method all(p: recursive? fn(_: T) -> Bool): Bool {
        return List<T>::_all[recursive](this, 0, p);
    }

    recursive? method filter(p: recursive? fn(_: T) -> Bool): List<T> {
        return List<T>::_filter[recursive](this, 0, List<T>@{}, p);
    }

    method ofType<U>(): List<U> {
        return List<T>::_ofType<U>[recursive](this, 0, List<U>@{});
    }

    recursive? method map<U>(f: recursive? fn(_: T) -> U): List<U> {
        return List<T>::_map<U>[recursive](this, 0, List<U>@{}, f);
    }

    method {when T Int} sum(): Int {
        return IntList::_sum[recursive](this, 0, 0);
    }
}

entity KeyList<K where KeyType> provides Object {
    field hkey: K;
    field tail: KeyList<K>?;

    recursive static removeKey(kl: KeyList<K>, k: K): KeyList<K>? {
        var tkey = kl.hkey;
        var ttail = kl.tail;

        if(ttail == none) {
            return none;
        } 
        elif(KeyType::equal(k, tkey)) {
            return ttail;
        }
        else {
            var newtail = KeyList<K>::removeKey[recursive](ttail, k);
            return KeyList<K>@{hkey=tkey, tail=newtail};
        }
    }
}

//<summary>A Set entity.</summary>
entity Set<T where Indexable> provides Object, PODType when T grounded PODType, APIType when T grounded APIType {
    hidden static _size(s: Set<T>): Int # set_size
    hidden static _has_key(s: Set<T>, key: T!KeyType): Bool # set_has_key
    hidden static _at_val(s: Set<T>, key: T!KeyType): T # set_at_val

    hidden static _get_keylist(s: Set<T>): KeyList<T!KeyType>? # set_get_keylist
    hidden static _clear_val(s: Set<T>, key: T!KeyType, newkl: KeyList<T!KeyType>): Set<T> # set_clear_val
    
    hidden static _unsafe_update(s: Set<T>, k: T!KeyType, v: T): Set<T> # set_unsafe_update
    hidden static _unsafe_add(s: Set<T>, k: T!KeyType, v: T, newkl: KeyList<T!KeyType>): Set<T> # set_unsafe_add

    hidden recursive static _entry_list(s: Set<T>, kl: KeyList<T!KeyType>?, l: List<T>): List<T> {
        if(kl == none) {
            return l;
        }
        else {
            var v = Set<T>::_at_val(s, kl.hkey);
            return Set<T>::_entry_list[recursive](s, KeyList<K!KeyType>::_get_tail(kl), l->push(v));
        }
    }

    method size(): Int {
        return Set<T>::_size(this);
    }
    
    method empty(): Bool {
        return Set<T>::_size(this) == 0;
    }
    
    method has(v: T): Bool {
        return Set<T>::_has_key(this, Indexable::getKey(v));
    }

    method insert(v: T): Set<T> {
        var key = Indexable::getKey(v);
        if(Set<T>::_has_key(this, key)) {
            return Set<T>::_unsafe_update(this, key, v);
        }
        else {
            var kle = Set<T>::_get_keylist(this);
            return Set<T>::_unsafe_add(this, key, v, KeyList<T!KeyType>@{hkey=key, tail=kle});
        }
    }

    method add(v: T): Set<T> {
        var key = Indexable::getKey(v);
        check !Set<T>::_has_key(this, key);
        
        var kle = Set<T>::_get_keylist(this);
        return Set<T>::_unsafe_add(this, key, v, KeyList<T!KeyType>@{hkey=key, tail=kle});
    }

    method remove(v: T): Set<T> {
        var key = Indexable::getKey(v);
        if(!Set<T>::_has_key(this, key)) {
            return this;
        }
        else {
            var kle = Set<T>::_get_keylist(this);
            if(kle == none) {
                return Set<T>@{};
            }
            else {
                var klr = KeyList<T!KeyType>::removeKey[recursive](kle, key);
                if(klr == none) {
                    return Set<T>@{};
                }
                else {
                    return Set<T>::_clear_val(this, key, klr);
                }
            }
        }
    }

    method getEntries(): List<T> {
        return Set<T>::_entry_list[recursive](this, Set<T>::_get_keylist(this), List<T>@{});
    }
}

//<summary>A Map entity.</summary>
entity Map<K where Indexable, V> provides Object, PODType when K grounded PODType && V grounded PODType, APIType when K grounded APIType && V grounded APIType {
    hidden static _size(m: Map<K, V>): Int # map_size
    hidden static _has_key(m: Map<K, V>, key: K!KeyType): Bool # map_has_key
    hidden static _at_key(m: Map<K, V>, key: K!KeyType): K # map_at_key
    hidden static _at_val(m: Map<K, V>, key: K!KeyType): V # map_at_val

    hidden static _get_keylist(m: Map<K, V>): KeyList<K!KeyType>? # map_get_keylist
    hidden static _clear_val(m: Map<K, V>, key: K!KeyType, newkl: KeyList<K!KeyType>): Map<K, V> # map_clear_val
    
    hidden static _unsafe_update(m: Map<K, V>, k: K!KeyType, key: K, val: V): Map<K, V> # map_unsafe_update
    hidden static _unsafe_add(m: Map<K, V>, k: K!KeyType, key: K, val: V, newkl: KeyList<K!KeyType>): Map<K, V> # map_unsafe_add

    hidden recursive static _key_list(m: Map<K, V>, kl: KeyList<K!KeyType>?, l: List<K>): List<K> {
        if(kl == none) {
            return l;
        }
        else {
            var k = Map<K, V>::_at_key(m, kl.hkey);
            return Map<K, V>::_key_list[recursive](m, kl.tail, l->push(k));
        }
    }

    hidden recursive static _key_set(m: Map<K, V>, kl: KeyList<K!KeyType>?, s: Set<K>): Set<K> {
        if(kl == none) {
            return s;
        }
        else {
            var k = Map<K, V>::_at_key(m, kl.hkey);
            return Map<K, V>::_key_set[recursive](m, kl.tail, s->add(k));
        }
    }

    hidden recursive static _value_list(m: Map<K, V>, kl: KeyList<K!KeyType>?, l: List<V>): List<V> {
        if(kl == none) {
            return l;
        }
        else {
            var v = Map<K, V>::_at_val(m, kl.hkey);
            return Map<K, V>::_value_list[recursive](m, kl.tail, l->push(v));
        }
    }

    hidden recursive static _entry_list(m: Map<K, V>, kl: KeyList<K!KeyType>?, l: List<MapEntry<K, V>>): List<MapEntry<K, V>> {
        if(kl == none) {
            return l;
        }
        else {
            var k = Map<K, V>::_at_key(m, kl.hkey);
            var v = Map<K, V>::_at_val(m, kl.hkey);
            return Map<K, V>::_entry_list[recursive](m, kl.tail, l->push(MapEntry<K, V>@{key=k, value=v}));
        }
    }

    method size(): Int {
        return Map<K, V>::_size(this);
    }
    
    method empty(): Bool {
        return Map<K, V>::_size(this) == 0;
    }
    
    method has(key: K): Bool {
        return Map<K, V>::_has_key(this, Indexable::getKey(key));
    }

    method get(key: K): V {
        var k = Indexable::getKey(key);
        check Map<K, V>::_has_key(this, k);

        return Map<K,V>::_at_val(this, k);
    }

    method tryGet(key: K): V? {
        var k = Indexable::getKey(key);
        return Map<K, V>::_has_key(this, k) ? Map<K,V>::_at_val(this, k) : none;
    }

    method insert(key: K, val: V): Map<K, V> {
        var k = Indexable::getKey(key);
        if(Map<K, V>::_has_key(this, k)) {
            return  Map<K, V>::_unsafe_update(this, k, key, val);
        }
        else {
            var kle = Map<K, V>::_get_keylist(this);
            return Map<K, V>::_unsafe_add(this, k, key, val, KeyList<K!KeyType>@{hkey=k, tail=kle});
        }
    }

    method add(key: K, val: V): Map<K, V> {
        var k = Indexable::getKey(key);
        check !Map<K, V>::_has_key(this, k);
        
        var kle = Map<K, V>::_get_keylist(this);
        return Map<K, V>::_unsafe_add(this, k, key, val, KeyList<K!KeyType>@{hkey=k, tail=kle});
    }

    method set(key: K, val: V): Map<K, V> {
        var k = Indexable::getKey(key);
        check Map<K, V>::_has_key(this, k);

        return  Map<K, V>::_unsafe_update(this, k, key, val);
    }

    method remove(key: K): Map<K, V> {
        var k = Indexable::getKey(key);
        if(!Map<K, V>::_has_key(this, k)) {
            return this;
        }
        else {
            var kle = Map<K, V>::_get_keylist(this);
            if(kle == none) {
                return Map<K, V>@{};
            }
            else {
                var klr = KeyList<K!KeyType>::removeKey[recursive](kle, key);
                if(klr == none) {
                    return Map<K, V>@{};
                }
                else {
                    return Map<K, V>::_clear_val(this, key, klr);
                }
            }
        }
    }

    method getKeyList(): List<K> {
        return Map<K, V>::_key_list[recursive](this, Map<K, V>::_get_keylist(this), List<K>@{});
    }

    method getKeySet(): Set<K> {
        return Map<K, V>::_key_set[recursive](this, Map<K, V>::_get_keylist(this), Set<K>@{});
    }

    method getValues(): List<V> {
        return Map<K, V>::_value_list[recursive](this, Map<K, V>::_get_keylist(this), List<V>@{});
    }

    method getEntries(): List<MapEntry<K, V>> {
        return Map<K, V>::_entry_list[recursive](this, Map<K, V>::_get_keylist(this), List<MapEntry<K, V>>@{});
    }
}
