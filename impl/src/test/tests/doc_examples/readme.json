{
    "suite": "readme",
    "tests": [
        {
            "test": "add",
            "src": null,
            "sig": "function main(x: Nat, y: Nat): Bool",
            "code": "function add2(x: Nat, y: Nat): Nat { return x + y; }",
            "refutes": [
                "add2(x, y) >= 0n",
                "add2(x, 0) == x",
                "add2(0, y) == y",
                "add2(2, 3) == 5n",
                "add2(x=2, y=3) == 5n",
                "add2(y=2, 5) == 7n"
            ],
            "reachables": [
                "add2(1, 2) == 3n",
                "add2(x, y) == 3n",
                "add2(x=x, 1) == 3n",
                "add2(y=y, 1) == 3n"
            ]
        },
        {
            "test": "allPositive",
            "src": null,
            "sig": "function main(x: Int): Bool",
            "code": "function allPositive(...args: List<Int>): Bool { return args.allOf(fn(x) => x >= 0i); }",
            "refutes": [
                "allPositive()",
                "allPositive(1, 4, 3)",
                "!allPositive(0, -3)",
                "x < 0i || allPositive(0, x)"
            ],
            "reachables": [
                "allPositive(0, x)",
                "!allPositive(0, x)"
            ]
        },
        {
            "test": "allPositiveCapture",
            "src": null,
            "sig": "function main(x: Int): Bool",
            "code": "function allPositive(v: Int, ...args: List<Int>): Bool { return args.allOf(fn(x) => x >= v); }",
            "refutes": [
                "allPositive(0i)"
            ],
            "reachables": [
                "allPositive(0i, 2, x)"
            ]
        },
        {
            "test": "sign",
            "src": null,
            "sig": "function main(x: Int): Bool",
            "code": "function sign(x?: Int=0i): Int { var y: Int; if(x == 0i) { y = 0i; } else { y = (x > 0i) ? 1i : -1i; } return y; }",
            "refutes": [
                "sign() == 0i",
                "sign(4i) == 1i",
                "sign(-4i) == -1i"
            ],
            "reachables": [
                "sign(x) == 1i",
                "sign(x) == 0i"
            ]
        }
    ]
}