//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive types used in the Bosque language
namespace NSCore;

//<summary>Special type which all values are instances of.</summary>
concept Any {
    method is<T>(): Bool # special_method
    method as<T>(): T # special_method

    method asOrNone<T>(): T? {
        return this->is<T>() ? this->as<T>() : none;
    }

    method asTry<T>(ref? v: T): Bool {
        if(!this->is<T>()) {
            return false;
        }
        else {
            v = this->as<T>();
            return true;
        }
    }

    method isSome(): Bool # special_method
    method isNone(): Bool # special_method
}

//<summary>Special type for representing all non-none values.</summary>
concept Some provides Any {
}

//<summary>Special type for indicating a value can be used as a key in a collection.</summary>
concept KeyType provides Any {
    function equal<T grounded KeyType>(a: T, b: T): Bool # special_method
    function less<T grounded KeyType>(a: T, b: T): Bool # special_method
}

//<summary>Type for indicating that a datatype is Plain-Old-Data.</summary>
concept PODType provides APIType {
}

//<summary>Type to unify Buffers and APITypes at top level for checking</summary>
concept APIValue provides Any {
}

//<summary>Type for indicating that a datatype can be exported as part of a stable API.</summary>
concept APIType provides APIValue {
}

//<summary>Type for representing the none-value.</summary>
grounded struct entity None provides KeyType, PODType, APIType {
}

//<summary>Primitive boolean value.</summary>
grounded struct entity Bool provides Some, KeyType, PODType, APIType {
}

//<summary>Primitive integer value.</summary>
grounded struct entity Int provides Some, KeyType, PODType, APIType {
}
inline prefix operator +(a: Int): Int = default;
inline prefix operator -(a: Int): Int = default;
inline infix operator *(a: Int, b, Int): Int = default;
inline infix operator /(a: Int, b, Int): Int = default;
inline infix operator +(a: Int, b, Int): Int = default;
inline infix operator -(a: Int, b, Int): Int = default;
inline infix operator ==(a: Int, b: Int): Bool = default;
inline infix operator !=(a: Int, b: Int): Bool = default;
inline infix operator <(a: Int, b: Int): Bool = default;
inline infix operator >(a: Int, b: Int): Bool = default;
inline infix operator <=(a: Int, b: Int): Bool = default;
inline infix operator >=(a: Int, b: Int): Bool = default;

//<summary>Primitive natural number value.</summary>
grounded struct entity Nat provides Some, KeyType, PODType, APIType {
}
inline prefix operator +(a: Nat): Nat = default;
inline infix operator *(a: Nat, b, Nat): Nat = default;
inline infix operator /(a: Nat, b, Nat): Nat = default;
inline infix operator +(a: Nat, b, Nat): Nat = default;
inline infix operator -(a: Nat, b, Nat): Nat = default;
inline infix operator ==(a: Nat, b: Nat): Bool = default;
inline infix operator !=(a: Nat, b: Nat): Bool = default;
inline infix operator <(a: Nat, b: Nat): Bool = default;
inline infix operator >(a: Nat, b: Nat): Bool = default;
inline infix operator <=(a: Nat, b: Nat): Bool = default;
inline infix operator >=(a: Nat, b: Nat): Bool = default;

//<summary>Primitive big-integer value.</summary>
grounded struct entity BigInt provides Some, KeyType, PODType, APIType {
}
inline prefix operator +(a: BigInt): BigInt = default;
inline prefix operator -(a: BigInt): BigInt = default;
inline infix operator *(a: BigInt, b, BigInt): BigInt = default;
inline infix operator /(a: BigInt, b, BigInt): BigInt = default;
inline infix operator +(a: BigInt, b, BigInt): BigInt = default;
inline infix operator -(a: BigInt, b, BigInt): BigInt = default;
inline infix operator ==(a: BigInt, b: BigInt): Bool = default;
inline infix operator !=(a: BigInt, b: BigInt): Bool = default;
inline infix operator <(a: BigInt, b: BigInt): Bool = default;
inline infix operator >(a: BigInt, b: BigInt): Bool = default;
inline infix operator <=(a: BigInt, b: BigInt): Bool = default;
inline infix operator >=(a: BigInt, b: BigInt): Bool = default;

//<summary>Primitive big-integer value.</summary>
grounded struct entity BigNat provides Some, KeyType, PODType, APIType {
}
inline prefix operator +(a: BigNat): BigNat = default;
inline infix operator *(a: BigNat, b, BigNat): BigNat = default;
inline infix operator /(a: BigNat, b, BigNat): BigNat = default;
inline infix operator +(a: BigNat, b, BigNat): BigNat = default;
inline infix operator -(a: BigNat, b, BigNat): BigNat = default;
inline infix operator ==(a: BigNat, b: BigNat): Bool = default;
inline infix operator !=(a: BigNat, b: BigNat): Bool = default;
inline infix operator <(a: BigNat, b: BigNat): Bool = default;
inline infix operator >(a: BigNat, b: BigNat): Bool = default;
inline infix operator <=(a: BigNat, b: BigNat): Bool = default;
inline infix operator >=(a: BigNat, b: BigNat): Bool = default;

//<summary>Primitive rational value.</summary>
grounded struct entity Rational provides Some, KeyType, PODType, APIType {
}
inline prefix operator +(a: Rational): Rational = default;
inline prefix operator -(a: Rational): Rational = default;
inline infix operator *(a: Rational, b, Rational): Rational = default;
inline infix operator /(a: Rational, b, Rational): Rational = default;
inline infix operator +(a: Rational, b, Rational): Rational = default;
inline infix operator -(a: Rational, b, Rational): Rational = default;
inline infix operator ==(a: Rational, b: Rational): Bool = default;
inline infix operator !=(a: Rational, b: Rational): Bool = default;
inline infix operator <(a: Rational, b: Rational): Bool = default;
inline infix operator >(a: Rational, b: Rational): Bool = default;
inline infix operator <=(a: Rational, b: Rational): Bool = default;
inline infix operator >=(a: Rational, b: Rational): Bool = default;

//<summary>Primitive float value -- compiler flags control bitness -- defaults to 64bit.</summary>
grounded struct entity Float provides Some, PODType, APIType {
}
inline prefix operator +(a: Float): Float = default;
inline prefix operator -(a: Float): Float = default;
inline infix operator *(a: Float, b, Float): Float = default;
inline infix operator /(a: Float, b, Float): Float = default;
inline infix operator +(a: Float, b, Float): Float = default;
inline infix operator -(a: Float, b, Float): Float = default;
inline infix operator <(a: Float, b: Float): Bool = default;
inline infix operator >(a: Float, b: Float): Bool = default;

//<summary>Primitive float decimal value.</summary>
grounded struct entity Decimal provides Some, PODType, APIType {
}
inline prefix operator +(a: Decimal): Decimal = default;
inline prefix operator -(a: Decimal): Decimal = default;
inline infix operator *(a: Decimal, b, Decimal): Decimal = default;
inline infix operator /(a: Decimal, b, Decimal): Decimal = default;
inline infix operator +(a: Decimal, b, Decimal): Decimal = default;
inline infix operator -(a: Decimal, b, Decimal): Decimal = default;
inline infix operator <(a: Decimal, b: Decimal): Bool = default;
inline infix operator >(a: Decimal, b: Decimal): Bool = default;

//<summary>Primitive complex floating point value.</summary>
grounded struct entity Complex provides Some, PODType, APIType {
}
inline prefix operator +(a: Complex): Complex = default;
inline prefix operator -(a: Complex): Complex = default;
inline infix operator *(a: Complex, b, Complex): Complex = default;
inline infix operator /(a: Complex, b, Complex): Complex = default;
inline infix operator +(a: Complex, b, Complex): Complex = default;
inline infix operator -(a: Complex, b, Complex): Complex = default;
inline infix operator <(a: Complex, b: Complex): Bool = default;
inline infix operator >(a: Complex, b: Complex): Bool = default;

//<summary>Primitive string value.</summary>
grounded entity String provides Some, KeyType, PODType, APIType {
    __safe private function s_length(s: String): Nat # string_count
    __assume_safe private function s_unsafe_charat(s: String): String # string_charat
    
    method length(): Nat {
        return String::s_length(this);
    }

    method charAt(idx: Nat): String
        requires release 0n <= idx && idx < String::s_length(this);
    {
        return String::s_unsafe_charat(this, idx);
    }
}

//<summary>Primitive safe string value.</summary>
grounded struct entity StringOf<T where validator> provides Some, KeyType, PODType, APIType {
    private str: String;

    method string(): String {
        return this.str;
    }

    function from(str: String): StringOf<T>
        requires release T::accepts(str);
    {
        return StringOf<T>#{ str=str };
    }
}

//<summary>Primitive DataString value.</summary>
grounded struct entity DataString<T where parsable> provides Some, APIValue {
    private str: String;

    method string(): String {
        return this.str;
    }

    function from(str: String): DataString<T> 
        requires release T::parse(str).isOk();
    {
        return DataString<T>#{ str=str };
    }
}

//<summary>An efficient buffer encoding for data.</summary>
struct entity Buffer<T where grounded PODType | APIType> provides Some, APIValue {
    private buf: ByteBuffer;
}

//<summary>An efficient buffer encoding for data.</summary>
struct entity DataBuffer<T where parsable> provides Some, APIValue {
    private buf: ByteBuffer;
}

enum BufferFormat {
    text,
    bosque,
    json
}

enum BufferEncoding {
    utf8,
    binary
}

enum BufferCompression {
    off,
    time,
    space
}

//<summary>An efficient byte buffer for data.</summary>
entity ByteBuffer provides Some, APIValue {
}

//<summary>Unit declarations for seconds, milliseconds, and ISOTime</summary>
numeric typedecl ISOSeconds = Int & {
    method toMilliseconds(): ISOMilliSecond {
        return ISOMilliSecond::create(this.value() * 1000);
    }
}
inline prefix operator +(a: ISOSeconds): ISOSeconds = default;
inline prefix operator -(a: ISOSeconds): ISOSeconds = default;
inline infix operator +(a: ISOSeconds, b, ISOSeconds): ISOSeconds = default;
inline infix operator -(a: ISOSeconds, b, ISOSeconds): ISOSeconds = default;
inline infix operator ==(a: ISOSeconds, b: ISOSeconds): Bool = default;
inline infix operator !=(a: ISOSeconds, b: ISOSeconds): Bool = default;
inline infix operator <(a: ISOSeconds, b: ISOSeconds): Bool = default;
inline infix operator >(a: ISOSeconds, b: ISOSeconds): Bool = default;
inline infix operator <=(a: ISOSeconds, b: ISOSeconds): Bool = default;
inline infix operator >=(a: ISOSeconds, b: ISOSeconds): Bool = default;

numeric typedecl ISOMilliSeconds = Int & {
    method toSeconds(): ISOSeconds {
        return ISOSeconds::create(this.value() / 1000);
    }
}
inline prefix operator +(a: ISOMilliSeconds): ISOMilliSeconds = default;
inline prefix operator -(a: ISOMilliSeconds): ISOMilliSeconds = default;
inline infix operator +(a: ISOMilliSeconds, b, ISOMilliSeconds): ISOMilliSeconds = default;
inline infix operator -(a: ISOMilliSeconds, b, ISOMilliSeconds): ISOMilliSeconds = default;
inline infix operator ==(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;
inline infix operator !=(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;
inline infix operator <(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;
inline infix operator >(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;
inline infix operator <=(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;
inline infix operator >=(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;

numeric ISOTime = Nat;
inline infix operator +(a: ISOMilliSeconds, b, ISOTime): ISOTime # op_isoaddsecl;
inline infix operator +(a: ISOTime, b, ISOMilliSeconds): ISOTime # op_isoaddsecr;
inline infix operator -(a: ISOTime, b, ISOTime): ISOMilliSeconds # op_isodiff;
inline infix operator ==(a: ISOTime, b: ISOTime): Bool = default;
inline infix operator !=(a: ISOTime, b: ISOTime): Bool = default;
inline infix operator <(a: ISOTime, b: ISOTime): Bool = default;
inline infix operator >(a: ISOTime, b: ISOTime): Bool = default;
inline infix operator <=(a: ISOTime, b: ISOTime): Bool = default;
inline infix operator >=(a: ISOTime, b: ISOTime): Bool = default;

//<summary>Primitive UUID value.</summary>
grounded struct entity UUID provides Some, KeyType, PODType, APIType {
}

//<summary>Unit declarations for LogicalTime</summary>
numeric LogicalTime = Nat;
inline infix operator +(a: Int, b, LogicalTime): LogicalTime # op_logic_iltl;
inline infix operator +(a: LogicalTime, b, Int): LogicalTime # op_logic_iltr;
inline infix operator +(a: Nat, b, LogicalTime): LogicalTime # op_logic_nltl;
inline infix operator +(a: LogicalTime, b, Nat): LogicalTime # op_logic_nltr;
inline infix operator -(a: LogicalTime, b, LogicalTime): Int # op_logic_ltdiff;
inline infix operator ==(a: LogicalTime, b: LogicalTime): Bool = default;
inline infix operator !=(a: LogicalTime, b: LogicalTime): Bool = default;
inline infix operator <(a: LogicalTime, b: LogicalTime): Bool = default;
inline infix operator >(a: LogicalTime, b: LogicalTime): Bool = default;
inline infix operator <=(a: LogicalTime, b: LogicalTime): Bool = default;
inline infix operator >=(a: LogicalTime, b: LogicalTime): Bool = default;

//<summary>Primitive hash value suitable for content addressable operations or crypto secure digests.</summary>
grounded entity CryptoHash provides Some, KeyType, PODType, APIType {
    __safe function compute<T>(value: T): CryptoHash # cryptohash_compute
}

//<summary>Primitive regex value.</summary>
entity Regex provides Some {
}

struct entity RegexMatch provides Some {
    field index: Nat;
    field length: Nat;

    invariant $index >= 0 && $length >= 0;
}

//<summary>Static methods for Tuples.</summary>
concept Tuple provides Some {
    function append(arg: Any): Tuple # special_method
}

//<summary>Static methods for Records.</summary>
concept Record provides Some {
    function join(arg: Any): Record # special_method
}

//<summary>Result type.</summary>
struct concept Result<T, E=Any> provides Some {
    struct entity Ok provides Result<T, E> {
        field value: T;

        function create(value: T): Ok {
            return Ok@{ value = value };
        }
    }

    struct entity Err provides Result<T, E> {
        field info: E;

        function create(info: E): Err {
            return Err@{ info = info };
        }
    }

    function createOk(value: T): Result<T, E> {
        return Ok::create(value);
    }

    function createErr(info: E): Result<T, E> {
        return Err::create(info);
    }

    method isOk(): Bool {
        return this.is<Ok>();
    }

    method isErr(): Bool {
        return this.is<Err>();
    }

    method value(): T {
        return this.as<Ok>().value;
    }

    method error(): E {
        return this.as<Err>().info;
    }

    method convert<U?, V?>(): Result<U, V> {
        return this.isOk() ? Result<U, V>::createOk(this.value().as<U>()) ? Result<U, V>::createErr(this.error().as<V>()); 
    }
}

//<summary>All actual entities/concepts implicitly provide this concept.</summary>
concept Object provides Some {
}

//<summary>All collections provide this concept so we can expand them with spread operators.</summary>
concept Expandoable<T> provides Object {
    method expand<U>(): List<U> # special_method
}
