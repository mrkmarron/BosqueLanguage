//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace NSCore;

__internal struct entity Vector<T, literal K=Nat> provides Object, Expandoable<T>, PODType when T PODType, APIType when T APIType {
    private function s_unsafe_get(l: Vector<T, K>, i: Nat): T # vector_unsafe_get

    method size(): Nat {
        return literal(K);
    }

    method empty(): Bool {
        return literal(K) == 0n;
    }

    method front(): T 
        requires release literal(K) != 0n;
    {
        return Vector<T, K>::s_unsafe_get(this, 0n);
    }

    method back(): T 
        requires release literal(K) != 0n;
    {
        return Vector<T, K>::s_unsafe_get(this, literal(K) - 1n);
    }

    method get(i: Nat): T 
        requires release 0n <= i && i < literal(K);
    {
        return Vector<T, K>::s_unsafe_get(this, i);
    }
}

concept ListFrom provides Object {
    __assume_safe private function s_rangeOfInt(start: Int, end: Int): List<Int> # list_rangeofint
    __assume_safe private function s_rangeOfNat(start: Nat, end: Nat): List<Nat> # list_rangeofnat

    __assume_safe private function s_zip<T, U>(l1: List<T>, l2: List<U>, size: Nat): List<#[T, U]> # list_zip
    __assume_safe private function s_unzipt<T, U>(l: List<#[T, U]>, size: Nat): List<T> # list_unzipt
    __assume_safe private function s_unzipu<T, U>(l: List<#[T, U]>, size: Nat): List<U> # list_unzipu

    function ints(start: Int, end: Int): List<Int>
        requires release start <= end;
    {
        return ListOf::s_rangeInt(start, end, end - start);
    }

    function nats(start: Nat, end: Nat): List<Nat>
        requires release start <= end;
    {
        return ListOf::s_rangeNat(start, end, end - start);
    }

    function zip<T=?, U=?>(l1: List<T>, l2: List<U>): List<#[T, U]>
        requires release List<T>::s_size(l1) == List<U>::s_size(l2);
    {
        return ListOf::s_zip<T, U>(l1, l2);
    }

    function unzip<T=?, U=?>(l: List<#[T, U]>): List<T>, List<U> {
        return ListOf::s_unzipt<T, U>(l), ListOf::s_unzipu<T, U>(l);
    }
}

__internal entity List<T> provides Object, Expandoable<T>, PODType when T PODType, APIType when T APIType {
    private function {when T grounded KeyType} s_hasCheck(l: List<T>, val: T): Bool # list_hascheck
    private recursive? function s_hasPredCheck(l: List<T>, p: recursive? pred(_: T) -> Bool): Bool # list_haspredcheck
    private recursive? function s_hasPredCheck_Idx(l: List<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Bool # list_haspredcheck_idx
    
    __safe private function s_size(l: List<T>): Nat # list_size
    __safe private function s_empty(l: List<T>): Bool # list_empty
    private function s_unsafe_get(l: List<T>, i: Nat): T # list_unsafe_get

    __safe private function s_fill<T>(k: Nat, val: T): List<T> # list_fill

    __safe private function s_concat2_Helper(l1: List<T>, l2: List<T>, size: Nat): List<T> # list_concat2

    private function {when T grounded KeyType} s_findIndexOf_KeyHelper(l: List<T>, val: T): Nat # list_findindexof_keyhelper
    private function {when T grounded KeyType} s_findIndexOfLast_KeyHelper(l: List<T>, val: T): Nat # list_findindexoflast_keyhelper

    private recursive? function s_findIndexOf_PredicateHelper(l: List<T>, p: recursive? pred(_: T) -> Bool): Nat # list_findindexof_predicatehelper
    private recursive? function s_findIndexOfLast_PredicateHelper(l: List<T>, p: recursive? pred(_: T) -> Bool): Nat # list_findindexoflast_predicatehelper
    private recursive? function s_findIndexOf_PredicateHelper_Idx(l: List<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat # list_findindexof_predicatehelper_idx
    private recursive? function s_findIndexOfLast_PredicateHelper_Idx(l: List<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat # list_findindexoflast_predicatehelper_idx

    private function {when T KeyType} s_count_KeyHelper(l: List<T>, v: T): Nat # list_count_helper

    private recursive? function s_countIf_Helper(l: List<T>, p: recursive? pred(_: T) -> Bool): Nat # list_countif_helper
    private recursive? function s_countIf_Helper_Idx(l: List<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat # list_countif_helper_idx
    
    private recursive? function s_filter_Helper(l: List<T>, p: recursive? pred(_: T) -> Bool): List<T> # list_filter_helper
    private recursive? function s_filter_Helper_Idx(l: List<T>, p: recursive? pred(_: T, _: Nat) -> Bool): List<T> # list_filter_helper_idx
    
    private function s_filterToType_Helper<U>(l: List<T>): List<U> # list_filtertotype_helper
    private function s_castToType_Helper<U>(l: List<T>): List<U> # list_casttotype_helper

    __safe private function s_slice_Helper(l: List<T>, start: Nat, end: Nat, count: Nat): List<U> # list_slice_helper

    private recursive? function s_map_Helper<U>(l: List<T>, f: recursive? fn(_: T) -> U): List<T> # list_map_helper
    private recursive? function s_map_Helper_Idx<U>(l: List<T>, f: recursive? fn(_: T, _: Nat) -> U): List<T> # list_map_helper_idx

    private recursive? function s_join_Helper<U>(l: List<T>, ol: List<U>, p: recursive? pred(_: T, _: U) -> Bool): List<#[T, U]> # list_join_helper
    private recursive? function s_joinGroup_Helper<U>(l: List<T>, ol: List<U>, p: recursive? pred(_: T, _: U) -> Bool): List<#[T, List<U>]> # list_joingroup_helper

    private recursive? function s_sort_Helper(l: List<T>, cmp: recursive? pred(_: T, _: T) -> Bool): List<T> # list_sort_helper

    private function s_rangeInBounds(l: List<T>, start: Nat, end: Nat): Bool {
        return start <= end & end <= List<T>::s_size(l); 
    }

    ////
    //Public interface
    ////

    function fill(k: Nat, val: T): List<T> {
        return List<T>::s_fill(k, val);
    }


    //TODO: when overloading is working better then make this a single concat with overloads
    function concat2(l1: List<T>, l2: List<T>): List<T> {
        return List<T>::s_concat2_Helper(l1, l2, l1.size() + l2.size());
    }

    function concat3(l1: List<T>, l2: List<T>, l3: List<T>): List<T> {
        let tl = List<T>::s_concat2_Helper(l2, l3, l2.size() + l3.size());
        return List<T>::s_concat2_Helper(l1, tl, l1.size() + tl.size());
    }

    method size(): Nat {
        return List<T>::s_size(this);
    }

    method empty(): Bool {
        return List<T>::s_empty(this);
    }

    method front(): T 
        requires release !List<T>::s_empty(this);
    {
        return List<T>::s_unsafe_get(this, 0n);
    }

    method frontOrNone(): T? {
        if(List<T>::s_empty(this)) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, 0n);
        }
    }

    method frontOrDefault(d: T): T {
        if(List<T>::s_empty(this)) {
            return d;
        }
        else {
            return List<T>::s_unsafe_get(this, 0n);
        }
    }

    method frontTry(out? res: T): Bool {
        if(!List<T>::s_empty(this)) {
            res = List<T>::s_unsafe_get(this, 0n);
            return true;
        }
        else {
            return false;
        }
    }

    method back(): T 
        requires release !List<T>::s_empty(this);
    {
        return List<T>::s_unsafe_get(this, List<T>::s_size(this) - 1n);
    }

    method backOrNone(): T? {
        if(List<T>::s_empty(this)) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, List<T>::s_size(this) - 1n);
        }
    }

    method backOrDefault(d: T): T {
        if(List<T>::s_empty(this)){
            return d;
        }
        else {
            return List<T>::s_unsafe_get(this, List<T>::s_size(this) - 1n);
        }
    }

    method backTry(out? res: T): Bool {
        if(!List<T>::s_empty(this)) {
            res = List<T>::s_unsafe_get(this, List<T>::s_size(this) - 1n);
            return true;
        }
        else {
            return false;
        }
    }

    method get(i: Nat): T 
        requires release i < List<T>::s_size(this);
    {
        return List<T>::s_unsafe_get(this, i);
    }

    method getOrNone(i: Nat): T? {
        if(i < List<T>::s_size(this)) {
            return List<T>::s_unsafe_get(this, i);
        }
        else {
            return none;
        }
    }

    method getOrDefault(i: Nat, d: T): T {
        if(i < List<T>::s_size(this)) {
            return List<T>::s_unsafe_get(this, i);
        }
        else {
            return d;
        }
    }

    method getTry(i: Nat, out? res: T): Bool {
        if(i < List<T>::s_size(this)) {
            res = List<T>::s_unsafe_get(this, i);
            return true;
        }
        else {
            return false;
        }
    }

    //method {when T grounded KeyType} toSet(): Set<T> {
    //    return List<T>::s_toset(this);
    //}

    recursive? method single(p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        let lastidx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);

        check lastidx == idx;
        check idx < end;

        return List<T>::s_unsafe_get(this, idx);
    }

    recursive? method singleOrNone(p: recursive? pred(_: T) -> Bool): T? {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        let lastidx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);

        if((idx != lastidx) | (idx == end)) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method singleOrDefault(d: T, p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        let lastidx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);

        if((idx != lastidx) | (idx == end)) {
            return d;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method singleTry(out? res: T, p: recursive? pred(_: T) -> Bool): Bool {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        let lastidx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);

        if((idx != lastidx) | (idx == end)) {
            return false;
        }
        else {
            res = List<T>::s_unsafe_get(this, idx);
            return true;
        }
    }

    recursive? method allOf(p: recursive? pred(_: T) -> Bool): Bool {
        return !List<T>::s_hasPredCheck[recursive?](this, pred !p);
    }

    recursive? method allOf(p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        return !List<T>::s_hasPredCheck[recursive?](this, pred !p);
    }

    recursive? method noneOf(p: recursive? pred(_: T) -> Bool): Bool {
        return !List<T>::s_hasPredCheck[recursive?](this, p);
    }

    recursive? method noneOf(p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        return !List<T>::s_hasPredCheck[recursive?](this, p);
    }

    recursive? method someOf(p: recursive? pred(_: T) -> Bool): Bool {
        return List<T>::s_hasPredCheck[recursive?](this, p);
    }

    recursive? method someOf(p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        return List<T>::s_hasPredCheck[recursive?](this, p);
    }

    recursive? method countIf(p: recursive? pred(_: T) -> Bool): Nat {
        return List<T>::s_countIf_Helper[recursive?](this, p);
    }

    recursive? method countIf(p: recursive? pred(_: T, _: Nat) -> Bool): Nat {
        return List<T>::s_countIf_Helper_Idx[recursive?](this, p);
    }

    method {when T grounded KeyType} contains(v: T): Bool {
        return List<T>::s_findIndexOf_KeyHelper(this, v) != end;
    }

    method {when T grounded KeyType} count(v: T): Int {
        return List<T>::s_count_keytype(this, v);
    }

    //
    //min, max, argmin, argmax, sum, product
    //

    recursive? method find(p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        check idx != end;
        return List<T>::s_unsafe_get(this, idx);
    }

    recursive? method find(p: recursive? pred(_: T, _: Nat) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        check idx != end;
        return List<T>::s_unsafe_get(this, idx);
    }

    recursive? method findOrNone(p: recursive? pred(_: T) -> Bool): T? {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findOrNone(p: recursive? pred(_: T, _: Nat) -> Bool): T? {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findOrDefault(d: T, p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return d;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findOrDefault(d: T, p: recursive? pred(_: T, _: Nat) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return d;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findTry(out? res: T, p: recursive? pred(_: T) -> Bool): Bool {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return false;
        }
        else {
            res = List<T>::s_unsafe_get(this, idx);
            return true;
        }
    }

    recursive? method findTry(out? res: T, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return false;
        }
        else {
            res = List<T>::s_unsafe_get(this, idx);
            return true;
        }
    }

    recursive? method findLast(p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        check idx != end;
        return List<T>::s_unsafe_get(this, idx);
    }

    recursive? method findLast(p: recursive? pred(_: T, _: Nat) -> Bool): T {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        check idx != end;
        return List<T>::s_unsafe_get(this, idx);
    }

    recursive? method findLastOrNone(p: recursive? pred(_: T) -> Bool): T? {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findLastOrNone(p: recursive? pred(_: T, _: Nat) -> Bool): T? {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findLastOrDefault(d: T, p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return d;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findLastOrDefault(d: T, p: recursive? pred(_: T, _: Nat) -> Bool): T {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return d;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findLastTry(out? res: T, p: recursive? pred(_: T) -> Bool): Bool {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return false;
        }
        else {
            res = List<T>::s_unsafe_get(this, idx);
            return true;
        }
    }

    recursive? method findLastTry(out? res: T, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return false;
        }
        else {
            res = List<T>::s_unsafe_get(this, idx);
            return true;
        }
    }

    recursive? method findIndexOf(p: recursive? pred(_: T) -> Bool): Nat {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        check idx != end;
        return idx;
    }

    recursive? method findIndexOf(p: recursive? pred(_: T, _: Nat) -> Bool): Nat {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        check idx != end;
        return idx;
    }

    recursive? method findIndexOfOrNone(p: recursive? pred(_: T) -> Bool): Nat? {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return none;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfOrNone(p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return none;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfOrDefault(d: Nat, p: recursive? pred(_: T) -> Bool): Nat {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return d;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfOrDefault(d: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): Nat {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return d;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfTry(out? res: Nat, p: recursive? pred(_: T) -> Bool): Bool {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    recursive? method findIndexOfTry(out? res: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    recursive? method findIndexOfLast(p: recursive? pred(_: T) -> Bool): Nat {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        check idx != end;
        return idx;
    }

    recursive? method findIndexOfLast(p: recursive? pred(_: T, _: Nat) -> Bool): Nat {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        check idx != end;
        return idx;
    }

    recursive? method findIndexOfLastOrNone(p: recursive? pred(_: T) -> Bool): Nat? {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return none;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfLastOrNone(p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return none;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfLastOrDefault(d: Nat, p: recursive? pred(_: T) -> Bool): Nat {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return d;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfLastOrDefault(d: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): Nat {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return d;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfLastTry(out? res: Nat, p: recursive? pred(_: T) -> Bool): Bool {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == end) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    recursive? method findIndexOfLastTry(out? res: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == end) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    method {when T grounded KeyType} indexOf(v: T): Nat {
        let idx = List<T>::s_findIndexOf_KeyHelper(this, v);
        check idx != end;
        return idx;
    }

    method {when T grounded KeyType} indexOfOrNone(v: T): Nat? {
        let idx = List<T>::s_findIndexOf_KeyHelper(this, v);
        if(idx == end) {
            return none;
        }
        else {
            return idx;
        }
    }

    method {when T grounded KeyType} indexOfOrDefault(d: T, v: T): Nat {
        let idx = List<T>::s_findIndexOf_KeyHelper(this, v);
        if(idx == end) {
            return d;
        }
        else {
            return idx;
        }
    }

    method {when T grounded KeyType} indexOfTry(out? res: T, v: T): Bool {
        let idx = List<T>::s_findIndexOf_KeyHelper(this, v);
        if(idx == end) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    method {when T grounded KeyType} indexOfLast(v: T): Nat {
        let idx = List<T>::s_findIndexOfLast_KeyHelper(this, v);
        check idx != end;
        return idx;
    }

    method {when T grounded KeyType} indexOfLastOrNone(v: T): Nat? {
        let idx = List<T>::s_findIndexOfLast_KeyHelper(this, v);
        if(idx == end) {
            return none;
        }
        else {
            return idx;
        }
    }

    method {when T grounded KeyType} indexOfLastOrDefault(d: T, v: T): Nat {
        let idx = List<T>::s_findIndexOfLast_KeyHelper(this, v);
        if(idx == end) {
            return d;
        }
        else {
            return idx;
        }
    }

    method {when T grounded KeyType} indexOfLastTry(out? res: T, v: T): Bool {
        let idx = List<T>::s_findIndexOfLast_KeyHelper(this, v);
        if(idx == end) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    recursive? method filter(p: recursive? pred(_: T) -> Bool): List<T> {
        return List<T>::s_filter_Helper[recursive?](this, p);
    }

    recursive? method filter(p: recursive? pred(_: T, _: Nat) -> Bool): List<T> {
        return List<T>::s_filter_Helper_Idx[recursive?](this, p);
    }

    method filterToType<U>(start?: Nat=0n, end?: Nat=List<T>::s_size(this)): List<U> {
        return List<T>::s_filterToTypetype_Helper<U>(this);
    }

    method castToType<U>(start?: Nat=0n, end?: Nat=List<T>::s_size(this)): List<U> {
        return List<T>::s_castToType_Helper<U>(this);
    }

    method slice(start?: Nat=0n, end?: Nat=List<T>::s_size(this)): List<T> 
        requires release List<T>::s_rangeInBounds(this, start, end);
    {
        return List<T>::s_slice_Helper(this, s, e, e - s);
    }

    method removeFirst(k: Nat): List<T> 
        requires release k <= List<T>::s_size(this);
    {
        return List<T>::s_slice_Helper(this, k, List<T>::s_size(this));
    }

    method removeLast(k: Nat): List<T> 
        requires release k <= List<T>::s_size(this);
    {
        return List<T>::s_slice_Helper(this, 0n, List<T>::s_size(this) - k);
    }

    recursive? method takeWhile(p: recursive? pred(_: T) -> Bool): List<T>  {
        let lpos = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, pred !p);
        return List<T>::s_slice_Helper(this, 0n, lpos);
    }

    recursive? method takeWhile(p: recursive? pred(_: T, _: Nat) -> Bool): List<T>  {
        let lpos = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, pred !p);
        return List<T>::s_slice_Helper(this, 0n, lpos);
    }

    recursive? method discardWhile(p: recursive? pred(_: T) -> Bool): List<T> {
        let lpos = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, pred !p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    recursive? method discardWhile(p: recursive? pred(_: T, _: Nat) -> Bool): List<T> {
        let lpos = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, pred !p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    recursive? method takeUntil(p: recursive? pred(_: T) -> Bool): List<T> {
        let lpos = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    recursive? method takeUntil(p: recursive? pred(_: T, _: Nat) -> Bool): List<T> {
        let lpos = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    recursive? method discardUntil(p: recursive? pred(_: T) -> Bool): List<T>  {
        let lpos = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    recursive? method discardUntil(p: recursive? pred(_: T, _: Nat) -> Bool): List<T>  {
        let lpos = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    //method {when T KeyType} unique(): List<T> {
    //    return List<T>::s_unique(this);
    //}

    //recursive? method uniqueOf(cmp: recursive? fn(_: T, _: T) -> Bool): List<T> {
    //    return List<T>::s_unique(this);
    //}

    //method reverse(): List<T> {
    //    return List<T>::s_reverse(this);
    //}

    recursive? method map<U=?>(f: recursive? fn(_: T) -> U): List<U>  {
        return List<T>::s_map_Helper<U>[recursive?](this, f);
    }

    recursive? method map<U=?>(f: recursive? fn(_: T, _: Nat) -> U): List<U>  {
        return List<T>::s_map_Helper_Idx<U>[recursive?](this, f);
    }

    //
    //Project using Map<K, V> operations
    //

    recursive? method join<U=?>(ol: List<U>, p: recursive? pred(_: T, _: U) -> Bool): List<#[T, U]> {
        return List<T>::s_join_Helper<U>[recursive?](this, ol, p);
    }

    recursive? method joinGroup<U=?>(ol: List<U>, p: recursive? pred(_: T, _: U) -> Bool): List<#[T, List<U>]> {
        return List<T>::s_joinGroup_Helper<U>[recursive?](this, ol, p);
    }

    method append(l: List<T>): List<T> {
        return List<T>::s_concat2_Helper(this, l, List<T>::s_size(this) + List<T>::s_size(l));
    }

    method prepend(l: List<T>): List<T> {
        return List<T>::s_concat2_Helper(l, this, List<T>::s_size(l) + List<T>::s_size(this));
    }

    //recursive? method partition<K=? where KeyType>(pf: recursive? fn(_: T) -> K): Map<K, List<T>> {
    //    const plist = this.map<K>[recursive?](pf);
    //    return List<T>::s_partition<K>(this, plist);
    //}

    recursive? method sort(cmp: recursive? pred(_: T, _: T) -> Bool): List<T> {
        return List<T>::s_sort_Helper[recursive?](this, cmp);
    }

    //
    //Convert to Map<K, V> operations
    //
}
