//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive types used in the Bosque language
namespace NSCore;

//<summary>Special type which all values are instances of.</summary>
concept Any {
    method is<T>(): Bool # special_method
    method as<T>(): T # special_method

    method tryAs<T>(): T? # special_method
    method optionAs<T> Option<T> # special_method
    method resultAs<T> Result<T> # special_method
    method defaultAs<T>(default: T): T # special_method

    method isConvertable<T>(): Bool # special_method
    method asConvert<T>(): T # special_method

    method tryAsConvert<T>(): T? # special_method
    method optionAsConvert<T> Option<T> # special_method
    method resultAsConvert<T> Result<T> # special_method
    method defaultAsConvert<T>(default: T): T # special_method

    method isNone(): Bool # special_method
    method isSome(): Bool # special_method
}

//<summary>Special type for representing all non-none values.</summary>
concept Some provides Any {
    method update(): Some # special_method
}

//<summary>A marker concept that indicates a type has a convert method that will allow conversion to a supertype -- used for method override contravariance</summary>
concept Convertable provides Any {
}

//<summary>Special type for indicating this type supports typed string use.</summary>
concept Parsable provides Any {
    abstract static resultParse(str: String): Result<Any, String>;
}

//<summary>Special type that all Validator (regex etc.) types provide.</summary>
concept Validator provides Any {
    abstract static accepts(str: String): Bool; 
}

//<summary>Special type for indicating a value can be used as a key in a collection.</summary>
concept KeyType provides Any {
    static equal<T where grounded KeyType>(a: T, b: T): Bool # special_method
    static less<T where grounded KeyType>(a: T, b: T): Bool # special_method
}

//<summary>Type for indicating that a datatype is Plain-Old-Data.</summary>
concept PODType provides APIType {
    static bufferify<T where grounded PODType>(data: T, format?: BufferFormat, encoding?: BufferEncoding, compression?: BufferCompression): Buffer<T> # pod_bufferify
    static parseBuffer<T where grounded PODType>(data: Buffer<T>): T # pod_parsebuffer
    static resultParseBuffer<T where grounded PODType>(data: Buffer<T>): Result<T, String> # pod_tryparsebuffer
}

//<summary>Type to unify Buffers and APITypes at top level for checking</summary>
concept APIValue provides Any {
}

//<summary>Type for indicating that a datatype can be exported as part of a stable API.</summary>
concept APIType provides APIValue {
    static bufferify<T where grounded APIType>(data: T, format?: BufferFormat, encoding?: BufferEncoding, compression?: BufferCompression): Buffer<T> # api_bufferify
    static parseBuffer<T where grounded APIType>(data: Buffer<T>): T # api_parsebuffer
    static resultParseBuffer<T where grounded APIType>(data: Buffer<T>): Result<T, String> # api_tryparsebuffer
}

//<summary>Type for representing the none-value.</summary>
struct concept Truthy provides Parsable {
    static truth(v: Truthy): Bool {
        return !!v;
    }

    override static resultParse(str: String): Result<Truthy, String> {
        if(str == "none") {
            return ok(none);
        }
        elif(str == "false") {
            return ok(false);
        }
        elif(str == "true") {
            return ok(true);
        }
        else {
            return err("Expected Truthy");
        }
    }
}

//<summary>Type for representing the none-value.</summary>
struct entity None provides Truthy, KeyType, PODType, APIType {
    override static resultParse(str: String): Result<None, String> {
        if(str == "none") {
            return ok(none);
        }
        else {
            return err("Expected None");
        }
    }
}

//<summary>Primitive boolean value.</summary>
struct entity Bool provides Some, Truthy, KeyType, PODType, APIType {
    override static resultParse(str: String): Result<Bool, String> {
        if(str == "false") {
            return ok(false);
        }
        elif(str == "true") {
            return ok(true);
        }
        else {
            return err("Expected Bool");
        }
    }

    static stringify(b: Bool): String {
        return b ? "true" : "false";
    }
    
    static parse(str: String): Bool
        requires release str == "false" || str == "true";
    {
        return (str == "false") ? false : true;
    }
}

//<summary>Primitive integer value.</summary>
struct entity Int provides KeyType, Parsable, PODType, APIType, Some {
    private static s_mod(a: Int, b: Int): Int # int_mod

    const min_value: Int = -9007199254740991;
    const max_value: Int = 9007199254740991;

    override static resultParse(str: String): Result<Int, String> # int_tryparse

    static stringify(i: Int): String # int_tostring
    static parse(str: String): Int # int_parse

    static max(v1: Int, v2: Int): Int {
        return v1 > v2 ? v1 : v2;
    }

    static min(v1: Int, v2: Int): Int {
        return v1 < v2 ? v1 : v2;
    }

    static mod(a: Int, b: Int): Int
        requires release a >= 0 && b > 0;
    {
        return Int::s_mod(a, b);
    }
}

//<summary>Primitive big-integer value.</summary>
struct entity BigInt provides KeyType, Parsable, PODType, APIType, Some {
    override static resultParse(str: String): Result<BigInt, String> # bigint_tryparse

    static stringify(i: BigInt): String # bigint_tostring
    static parse(str: String): BigInt # bigint_parse

    static fromInt(i: Int): BigInt # bigint_fromint

    method isSafeInt(): BigInt # bigint_issafeint
    method toInt(): Int # bigint_toint 
}

//<summary>Primitive float 64 value.</summary>
struct entity Float64 provides Parsable, PODType, APIType, Some {
    hidden static s_float_min_value(): Float64 # float_min_value
    hidden static s_float_max_value(): Float64 # float_max_value
    hidden static s_float_infinity_value(): Float64 # float_infinity_value
    hidden static s_float_nan_value(): Float64 # float_nan_value

    const min_value: Float64 = Float64::s_float_min_value();
    const max_value: Float64 = Float64::s_float_max_value();

    const infinity: Float64 = Float64::s_float_infinity_value();
    const nan: Float64 = Float64::s_float_nan_value();
    
    const pi: Float64 = 3.1415926535897931f;
    const e: Float64 = 2.7182818284590451f;

    override static resultParse(str: String): Result<Float64, String> # float64_tryparse

    static stringify(f: Float64): String # float64_tostring
    static parse(str: String): Float64 # float64_parse

    method isInfinite(): Bool # float64_isinfinity
    method isNan(): Bool # float64_isnan

    static compare(a: Float64, b: Float64): Int # float64_compare

    method abs(): Float64 # float64_abs
    method ceiling(): Float64 # float64_ceiling
    method floor(): Float64 # float64_floor

    static pow(x: Float64, y: Float64): Float64 # float64_pow
    static pow2(v: Float64): Float64 # float64_pow2
    static pow10(v: Float64): Float64 # float64_pow10
    static exp(y: Float64): Float64 # float64_exp

    static root(x: Float64, y: Float64): Float64 # float64_root

    method square(): Float64 # float64_square
    method sqrt(): Float64 # float64_sqrt

    static log(v: Float64): Float64 # float64_log
    static log2(v: Float64): Float64 # float64_log2
    static log10(v: Float64): Float64 # float64_log10

    method sin(): Float64 # float64_sin
    method cos(): Float64 # float64_cos
    method tan(): Float64 # float64_tan

    static min(v1: Float64, v2: Float64): Float64 # float64_min
    static max(v1: Float64, v2: Float64): Float64 # float64_max

    static sum(l: List<Float64>): Float64 # float64_sum
    static product(l: List<Float64>): Float64 # float64_product
}

//<summary>Primitive string value.</summary>
entity String provides KeyType, PODType, APIType, Some {
    private static s_length(s: String): Int # string_count
    private static s_charat(s: String): Int # string_charat

    private static s_concat(s1: List<String>): String # string_concat

    private static s_rangeInBounds(str: String, start: Int?, end: Int?): Bool {
        let s, e = start ?| 0, end ?| String::s_length(str);
        return 0 <= s && s <= e && e <= String::s_length(str);
    }

    private static s_substring(s: String, start: Int, end: Int): String # string_substring

    method length(): Int {
        return String::s_length(this);
    }

    method charAt(idx: Int): String
        requires release 0 <= idx && idx < String::s_length(this);
    {
        return String::s_charat(this, idx);
    }

    static concat(...args: List<String>): String {
        if(List<String>::s_size(args) == 0) {
            return "";
        }
        elif(List<String>::s_size(args) == 1) {
            return args.front();
        }
        else {
            return String::s_concat(args);
        }
    }

    method substring(start?: Int, end?: Int): String
        requires release String::s_rangeInBounds(this, start, end);
    {
        let s, e = start ?| 0, end ?| String::s_length(this);
        return String::s_substring(this, s, e);
    }

    method includes(str: String): Bool # string_includes
    method startsWith(str: String): Bool # string_startswith
    method endsWith(str: String): Bool # string_endswith

    method indexOf(str: String): Int # string_indexof
    method lastIndexOf(str: String): Int # string_indexof

    method split(sep: String): List<String> # string_indexof
    static join(sep: String, args: List<String>): String # string_join

    method trim(): String # string_trim
    method trimStart(): String # string_trimstart
    method trimEnd(): String # string_trimend

    static compare(a: String, b: String): Bool # string_compare
}

//<summary>Primitive safe string value.</summary>
entity StringOf<T where Validator> provides KeyType, Some, PODType, APIType {
    private static s_unsafe_from(str: String): SafeString<T> # stringof_unsafe_from

    static from(str: String): StringOf<T>
        requires release T::accepts(str);
    {
        return StringOf<T>::s_unsafe_from(str);
    }
  
    static from(str: String): StringOf<T>
        requires release T::accepts(str);
    {
        return StringOf<T>::s_unsafe_from(str);
    }

    static tryFrom(str: String): StringOf<T>? {
        return T::accepts(str) ? StringOf<T>::s_unsafe_from(str) : none;
    }

    static optionFrom(str: String): Option<StringOf<T>> {
        return T::accepts(str) ? of(StringOf<T>::s_unsafe_from(str)) : empty;
    }

    static resultFrom(str: String): Result<StringOf<T>> {
        return T::accepts(str) ? ok(StringOf<T>::s_unsafe_from(str)) : err();
    }

    method transformable<U where Validator>(): Bool {
        return U::accepts(this.string());
    }
    
    method transform<U where Validator>(): StringOf<U> {
        return StringOf<U>::from(this.string());
    }

    method tryTransform<U where Validator>(): StringOf<U>? {
        return StringOf<U>::tryFrom(this.string());
    }

    method optionTransform<U where Validator>(): Option<StringOf<U>> {
        return StringOf<U>::optionFrom(this.string());
    }

    method resultTransform<U where Validator>(): Result<StringOf<U>> {
        return StringOf<U>::resultFrom(this.string());
    }
}

//<summary>Primitive DataString value.</summary>
entity DataString<T where Parsable> provides APIValue, KeyType, Some {
    private static s_unsafe_from(str: String): DataString<T> # datastring_unsafe_from

    method string(): String # datastring_string

    static from(str: String): DataString<T> 
        requires release T::tryParse(str).isOk();
    {
        return DataString<T>::s_unsafe_from(str);
    }

    static tryFrom(str: String): DataString<T>? {
        return T::tryParse(str).isOk() ? DataString<T>::s_unsafe_from(str) : none;
    }

    static optionFrom(str: String): Option<DataString<T>> {
        return T::tryParse(str).isOk() ? of(DataString<T>::s_unsafe_from(str)): empty;
    }

    static resultFrom(str: String): Result<DataString<T>> {
        return T::tryParse(str).isOk() ? ok(DataString<T>::s_unsafe_from(str)) : err();
    }

    method transformable<U where Parsable>(): Bool {
        return U::tryParse(this.string()).isOk();
    }

    method transform<U where Parsable>(): DataString<U>  {
        return DataString<U>::from(this.string());
    }

    method tryTransform<U where Parsable>(): DataString<U>? {
        return DataString<U>::tryFrom(this.string());
    }

    method optionTransform<U where Parsable>(): Option<DataString<U>> {
        return DataString<U>::tryFrom(this.string());
    }

    method resultTransform<U where Parsable>(): Result<DataString<U>> {
        return DataString<U>::tryFrom(this.string());
    }
}

//<summary>An efficient buffer encoding for data.</summary>
entity Buffer<T where grounded PODType | APIType> provides APIValue, Some {
    method bytes(): ByteBuffer # buffer_bytes
}

//<summary>An efficient buffer encoding for data.</summary>
entity BufferOf<T where Parsable> provides APIValue, Some {
    method bytes(): ByteBuffer # bufferof_bytes
}

enum BufferFormat {
    text,
    bosque,
    json
}

enum BufferEncoding {
    utf8,
    binary
}

enum BufferCompression {
    off,
    time,
    space
}

//<summary>An efficient byte buffer for data.</summary>
entity ByteBuffer provides APIValue, Some {
}

//<summary>Primitive ISO standard date time value.</summary>
struct entity ISOTime provides Parsable, PODType, APIType, Some {
    override static tryParse(str: String): Result<ISOTime, String> # time_tryparse
}

//<summary>Primitive UUID value.</summary>
struct entity UUID provides KeyType, Parsable, PODType, APIType, Some {
    override static tryParse(str: String): Result<UUID, String> # uuid_tryparse
}

//<summary>All actual ordered event times implicitly provide this.</summary>
struct entity LogicalTime provides KeyType, Parsable, PODType, APIType, Some {
    override static tryParse(str: String): Result<LogicalTime, String> # logicaltime_tryparse

    static zero(): LogicalTime # logicaltime_zero
    static tick(t: LogicalTime): LogicalTime # logicaltime_tick
}

//<summary>Primitive hash value suitable for content addressable operations or crypto secure digests.</summary>
entity CryptoHash provides KeyType, Parsable, PODType, APIType, Some {
    static compute<T>(value: T): CryptoHash # cryptohash_compute

    override static tryParse(str: String): Result<CryptoHash, String> # cryptohash_tryparse
}

//<summary>All actual enums implicitly provide this.</summary>
concept Enum provides Some {
}

//<summary>All actual custom keys implicitly provide this.</summary>
concept IdKey provides Some {
}

//<summary>Primitive regex value.</summary>
entity Regex provides Some {
    hidden static s_accepts(str: String, start: Int, end: Int): Bool # regex_accepts
    hidden static s_match(str: String, start: Int, end: Int): Int, Int # regex_match

    hidden static s_rangeInBounds(str: String, start: Int?, end: Int?): Bool {
        let s, e = start ?| 0, end ?| String::s_length(str);
        return 0 <= s && s <= e && e <= String::s_length(str); 
    }

    method accepts(str: String, start?: Int, end?: Int): Bool
        requires release Regex::s_rangeInBounds(s, start, end);
    {
        let s, e = start ?| 0, end ?| String::s_length(str);
        return Regex::s_accepts(str, s, e);
    }

    method match(str: String, start?: Int, end?: Int): RegexMatch
        requires release Regex::s_rangeInBounds(s, start, end);
    {
        let s, e = start ?| 0, end ?| String::s_length(str);

        let i, l = Regex::s_match(str, s, e);
        if(l == -1) {
            return RegexMatch@{ success=false, index=-1, length=-1 };
        }
        else {
            return RegexMatch@{ success=true, index=i, length=l };
        }
    }
}

entity RegexMatch provides Object {
    field success: Bool;
    field index: Int;
    field length: Int;
}

//<summary>All actual tuples implicitly provide this concept.</summary>
concept Tuple provides Some, Convertable {
    method convertable<U where grounded Tuple>(): Bool # tuple_convertable
    method convert<U where grounded Tuple>(): U # tuple_convert

    static append(...args: List<Tuple>): Tuple # special_method
}

//<summary>All actual records implicitly provide this concept.</summary>
concept Record provides Some, Convertable {
    method convertable<U where grounded Record>(): Bool # record_convertable
    method convert<U where grounded Record>(): U # record_convert

    static join(...args: List<Record>): Record # special_method
}

//<summary>Option type</summary>
struct concept Option<T> provides Some, Convertable, PODType when T grounded PODType, APIType when T grounded APIType {   
    static createValue(value: T): Option<T> {
        return Of<T>::create(value);
    }

    method isValue(): Bool {
        return this.is<Of<T>>();
    }

    method isEmpty(): Bool {
        return this.is<Empty>();
    }

    method value(): T {
        return this.as<Of<T>>().value;
    }

    method convertable<U>(): Bool # option_convertable
    method convert<U>(): Option<U> # option_convert
}

struct entity Of<T> provides Option<T> {
    field value: T;

    static create(value: T): Of<T> {
        return Of<T>@{ data = data };
    }
}

struct entity Empty provides Option<*> {
}

//<summary>Result type.</summary>
struct concept Result<T, E=None> provides Some, Convertable, PODType when T PODType && E PODType, APIType when T APIType && E APIType {   
    static createOk(result: T): Result<T, E> {
        return Ok<T, E>::create(result);
    }

    static createErr(info: E): Result<T, E> {
        return Err<E>::create(info);
    }

    method isOk(): Bool {
        return this.is<Ok<T, E>>();
    }

    method isErr(): Bool {
        return this.is<Err<E>>();
    }

    method result(): T {
        return this.as<Ok<T, E>>().result;
    }

    method failure(): E {
        return this.as<Err<E>>().failure;
    }

    method convertable<U>(): Bool # result_convertable
    method convert<U>(): U # result_convert
}

struct entity Ok<T, E=None> provides Result<T, E> {
    field result: T;

    static create(result: T): Ok<T, E> {
        return Ok<T, E>@{ result = result };
    }
}

struct entity Err<E=None> provides Result<*, E> {
    field failure: E;

    static create(failure: E): Err<E> {
        return Err<E>@{ failure = failure };
    }
}

//<summary>All actual entities/concepts implicitly provide this concept.</summary>
concept Object provides Some {
}

//<summary>All collections provide this concept so we can expand them with spread operators.</summary>
concept Expandoable<T> provides Object {
    method expand<U>(): List<U> # special_method
}
