//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the fluent core language
namespace NSCore;

//<summary>Type for representing all non-none values.</summary>
concept Collection<T> provides Object {
}

//<summary>A List entity.</summary>
entity List<T> provides Collection<T> {
    field value: T;
    field tail: List<T>?;

    recursive method map<U>(f: recursive? fn(_: T) -> U): List<U> {
        var nvalue = f[recursive?](this.value);

        if(this.tail == none) {
            return List<U>{value=nvalue, tail=none};
        }
        else {
            const ntail = this.tail->map<U>[recursive](f);
            return List<U>{value=nvalue, tail=ntail};
        }
    }
}

entity Set<T where Indexable> provides Collection<T> {
    field value: T;
    field left: Set<T>?;
    field right: Set<T>?;
}