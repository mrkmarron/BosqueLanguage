//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive types used in the Bosque language
namespace NSCore;

//<summary>Special type which all values are instances of.</summary>
concept Any {
    method is<T>(): Bool # special_method
    method as<T>(): T # special_method

    method tryAs<T>(): T? # special_method
    method defaultAs<T>(default: T): T # special_method

    method isNone(): Bool # special_method
    method isSome(): Bool # special_method
}

//<summary>Special type for representing all non-none values.</summary>
concept Some provides Any {
    method update(): Some # special_method
    method merge(): Some # special_method
    method project<T>(): Some # special_method
    method tryProject<T>(): Some? # special_method
}

//<summary>Types that can be used in equality operations or in key based containers.</summary>
concept Indexable provides Any {
    static getKey(a: Indexable): KeyType # special_method
}

//<summary>Special type for indicating this type supports typed string use.</summary>
concept Parsable provides Any {
    abstract static tryParse(str: String): Result<Any>;
}

//<summary>Special type that all Validator (regex etc.) types provide.</summary>
concept Validator provides Any {
    abstract static validate(str: String): Bool; 
}

//<summary>Special type for indicating a value can be used as a key in a collection.</summary>
concept KeyType provides Any, Indexable {
    static equal(a: KeyType, b: KeyType): Bool # special_method
}

//<summary>Type for indicating that a datatype is Plain-Old-Data.</summary>
concept PODType provides Any, Parsable {
    static stringify<T where PODType>(data: T): StringOf<T> # pod_stringify
    static parseString<T where PODType>(str: StringOf<T>): T # pod_parsestring
    static tryParseString<T where PODType>(str: String): Result<T> # pod_tryparsestring

    static bufferify<T where PODType>(data: T, format?: BufferFormat, encoding?: BufferEncoding, compression?: BufferCompression): Buffer<T> # pod_bufferify
    static parseBuffer<T where PODType>(data: Buffer<T>): T # pod_parsebuffer

    static jsonify<T where PODType>(data: T): String # pod_jsonify
    static parseJSON<T where PODType>(str: String): T # pod_parsejson
    static tryParseJSON<T where PODType>(str: String): Result<T> # pod_tryparsejson

    override static tryParse(str: String): Result<Any> # pod_tryparse
}

//<summary>Type to unify Buffers and APITypes at top level for checking</summary>
concept APIValue provides Any {
}

//<summary>Type for indicating that a datatype can be exported as part of a stable API.</summary>
concept APIType provides APIValue, Parsable {
    static stringify<T where APIType>(data: T): StringOf<T> # api_stringify
    static parseString<T where APIType>(str: StringOf<T>): T # api_parsestring
    static tryParseString<T where APIType>(str: String): Result<T> # api_tryparsestring

    static bufferify<T where APIType>(data: T, format?: BufferFormat, encoding?: BufferEncoding, compression?: BufferCompression): Buffer<T> # api_bufferify
    static parseBuffer<T where APIType>(data: Buffer<T>): T # api_parsebuffer

    static jsonify<T where APIType>(data: T): String # api_jsonify
    static parseJSON<T where APIType>(str: String): T # api_parsejson
    static tryParseJSON<T where APIType>(str: String): Result<T> # api_tryparsejson

    override static tryParse(str: String): Result<Any> # api_tryparse
}

//<summary>Type for representing the none-value.</summary>
concept Truthy provides KeyType, PODType, APIType {
    override static tryParse(str: String): Result<Any> # truthy_tryparse
}

//<summary>Type for representing the none-value.</summary>
entity None provides Truthy {
    override static tryParse(str: String): Result<Any> # none_tryparse
}

//<summary>Primitive boolean value.</summary>
entity Bool provides Some, Truthy {
    override static tryParse(str: String): Result<Any> # bool_tryparse
}

//<summary>Primitive integer value.</summary>
entity Int provides KeyType, PODType, APIType, Some {
    override static tryParse(str: String): Result<Any> # int_tryparse

    static max(v1: Int, v2: Int): Int {
        return v1 > v2 ? v1 : v2;
    }

    static min(v1: Int, v2: Int): Int {
        return v1 < v2 ? v1 : v2;
    }
}

//<summary>Primitive string value.</summary>
entity String provides KeyType, PODType, APIType, Some {
    override static tryParse(str: String): Result<Any> # string_tryparse
}

//<summary>Primitive stringof value.</summary>
entity StringOf<T where Parsable | Validator> provides KeyType, Some, PODType when T subtype PODType, APIType when T subtype APIType {
    method rawString(): String # stringof_rawstring

    static asStringOf<T>(str: String): StringOf<T> # stringof_asstring
    static tryAsString<T>(str: String): StringOf<T>? # stringof_tryasstring

    method convert<U where Parsable | Validator>(): StringOf<U> # stringof_convert
    method tryConvert<U where Parsable | Validator>(): StringOf<U>? # stringof_tryconvert
}

enum BufferFormat {
    Fluent,
    JSON,
    Binary
}

enum BufferEncoding {
    UTF8,
    URI,
    Base64
}

enum BufferCompression {
    None,
    RLE,
    Time,
    Space
}

//<summary>An efficient buffer encoding for data.</summary>
entity Buffer<T where PODType | APIType> provides APIValue, Some {
}

//<summary>Primitive ISO standard date time value.</summary>
entity ISOTime provides PODType, APIType, Some {
    override static tryParse(str: String): Result<Any> # time_tryparse
}

//<summary>Primitive GUID value.</summary>
entity GUID provides KeyType, PODType, APIType, Some {
    static create(guid: String): GUID # guid_create 

    override static tryParse(str: String): Result<Any> # guid_tryparse
}

//<summary>All actual ordered event times implicitly provide this.</summary>
entity EventTime provides KeyType, PODType, APIType, Some {
    override static tryParse(str: String): Result<Any> # eventtime_tryparse

    static zero(): EventTime # eventtime_zero
    static tick(t: EventTime): EventTime # eventtime_tick
}

//<summary>Primitive hash value suitable for keys in maps or other associative containers.</summary>
entity DataHash provides KeyType, PODType, APIType, Some {
    static compute<T>(T: value): DataHash # datahash_compute

    override static tryParse(str: String): Result<Any> # datahash_tryparse
}

//<summary>Primitive hash value suitable for content addressable operations or crypto secure digests.</summary>
entity CryptoHash provides provides KeyType, PODType, APIType, Some {
    static compute<T>(T: value): CryptoHash # cryptohash_compute

    override static tryParse(str: String): Result<Any> # cryptohash_tryparse
}

//<summary>All actual enums implicitly provide this.</summary>
concept Enum provides KeyType, APIType, Some {
}

//<summary>All actual custom keys implicitly provide this.</summary>
concept IdKey provides KeyType, Some {
}

//<summary>A concept for dealing with guid ids.</summary>
concept GUIDIdKey provides IdKey, APIType {
}

//<summary>A concept for dealing with eventime ids.</summary>
concept EventTimeIdKey provides IdKey, APIType {
}

//<summary>A concept for dealing with hashes -- is an API type if underlying type is an API type.</summary>
concept DataHashIdKey provides KeyType, Some {
}

//<summary>A concept for dealing with hashes -- is an API type if underlying type is an API type.</summary>
concept CryptoHashIdKey provides KeyType, Some {
}

//<summary>Primitive regex value.</summary>
entity Regex provides Some {
    method test(str: String, start?: Int, end?: Int): Bool # regex_match

    //
    //TODO: this is pretty boring right now
    //
}

//<summary>All actual tuples implicitly provide this concept.</summary>
concept Tuple provides Some {
}

//<summary>All actual POD tuples implicitly provide this concept.</summary>
concept PODTuple provides PODType, Tuple {
    override static tryParse(str: String): Result<Any> # podtuple_tryparse
}

//<summary>All actual POD tuples implicitly provide this concept.</summary>
concept APITuple provides APIType, Tuple {
    override static tryParse(str: String): Result<Any> # apituple_tryparse
}

//<summary>All actual records implicitly provide this concept.</summary>
concept Record provides Some {
}

//<summary>All actual POD records implicitly provide this concept.</summary>
concept PODRecord provides POD, Record {
    override static tryParse(str: String): Result<Any> # podrecord_tryparse
}

//<summary>All actual POD records implicitly provide this concept.</summary>
concept APIRecord provides APIType, Record {
    override static tryParse(str: String): Result<Any> # apituple_tryparse
}

entity MapEntry<K where Indexable, V> provides Some, PODType when K subtype POD && V subtype POD, APIType when K subtype APIType && V subtype APIType {
    field key: K;
    field value: V;

    static create(k: K, v: V): MapEntry<K, V> # mapentry_create
}

//<summary>Providing this concept allows for an entity to be compared or stored in a key based container using the key field.</summary>
entity Result<T> provides Some {
    hidden _issuccess: Bool;
    hidden _result: T?;
    hidden _error: Any;

    static success(result: T): Result<T> # result_success
    static failure(info?: Any): Result<T> # result_error

    method isSuccess(): Bool {
        return this._issuccess;
    }

    method isError(): Bool {
        return !this._issuccess;
    }

    method result(): T {
        check this._issuccess;
        return this._result->as<T>();
    }

    method error(): Any {
        check !this._issuccess;
        return this._error;
    }

    method errorAs<U>(): U  {
        check !this._issuccess;
        return this._error->as<U>();
    }

    method convert<U>(): Result<U> {
        return this._issuccess ? Result<U>::success(this._result->as<U>()) : Result<U>::failure(this._error);
    }
}

//<summary>A lightweight tagging class for values.</summary>
entity Tagged<T where KeyType, U> provides Indexable, Some {
    field key: K;
    field value: U;

    static create(key: T, value: U): Tagged<T, U> # tagged_create
}

//<summary>All actual entities/concepts implicitly provide this concept.</summary>
concept Object provides Some {
}

//<summary>A pure concept defining useful static numerical operations.</summary>
concept Math {
    static mult(a: Int, b: Int): Int # math_mult
    static div(a: Int, b: Int): Int # math_div
    static mod(a: Int, b: Int): Int # math_mod
}

//<summary>Providing this concept allows for an entity to be compared or stored in a key based container using the key field.</summary>
concept Keyed<T where KeyType> provides Indexable, Some {
    field key: T;
}

