//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive types used in the Bosque language
namespace NSCore;

//<summary>Special type which all values are instances of.</summary>
concept Any {
    method is<T>(): Bool # special_method
    method as<T>(): T # special_method

    method tryAs<T>(): T? # special_method
    method defaultAs<T>(default: T): T # special_method

    method isNone(): Bool # special_method
    method isSome(): Bool # special_method
}

//<summary>Special type for representing all non-none values.</summary>
concept Some provides Any {
    method update(): Some # special_method
    method merge(): Some # special_method
    method project<T>(): Some # special_method
}

//<summary>Types that can be used in equality operations or in key based containers.</summary>
concept Indexable provides Any {
}

//<summary>Special type for indicating a value can be used as a key in a collection.</summary>
concept KeyType provides Any, Indexable {
}

//<summary>Special type for indicating this type supports typed string use.</summary>
concept Parsable provides Any {
    abstract static tryParse(str: String): Some?;
}

//<summary>Type for indicating that a datatype is Plain-Old-Data.</summary>
concept POD provides Any {
    static stringify<T where POD>(data: T): ValidatedString<T> # pod_stringify //note special case where T is ValidatedString<X> then type system should know identity -- ValidatedString<ValidatedString<ZipCode>> = ValidatedString<Zipcode>
    static bufferify<T where POD>(data: T): PODBuffer<T> # pod_bufferify

    static tryParseAs<T where POD>(data: String | PODBuffer): Result<T> # pod_trypodparseas
}

//<summary>Type for representing the none-value.</summary>
concept Truthy provides POD {
}

//<summary>Type for representing the none-value.</summary>
entity None provides KeyType, POD, Truthy {
}

//<summary>Primitive boolean value.</summary>
entity Bool provides KeyType, Parsable, POD, Some, Truthy {
    override static tryParse(str: String): Some? {
        return Bool::tryParseAs(str);
    }

    static tryParseAs(str: String): Bool? {
        if(str == "true") {
            return true;
        }
        elif(str == "false") {
            return result: false;
        }
        else {
            return none;
        }
    }
}

//<summary>Primitive integer value.</summary>
entity Int provides KeyType, Parsable, POD, Some {
    override static tryParse(str: String): Some? {
        return Int::tryParseAs(str);
    }

    static tryParseAs(str: String): Int? # int_tryparse

    static max(v1: Int, v2: Int): Int {
        return v1 > v2 ? v1 : v2;
    }

    static min(v1: Int, v2: Int): Int {
        return v1 < v2 ? v1 : v2;
    }
}

//<summary>Primitive string value.</summary>
entity String provides KeyType, POD, Some {
}

entity StringOf<T where Parsable> provides KeyType, Some {
    field string_of_value: String;

    method convert<U where Parsable>(): StringOf<U> # stringof_convert;
}

entity ValidatedString<T where Validator> provides KeyType, POD, Some {
    field validated_string_value: String;
}

//<summary>All actual format validators provide this concept.</summary>
//
//TODO: validator T = RegexLiteral | POD;
//
concept Validator provides Any {
}

//<summary>An efficient buffer encoding for POD data.</summary>
entity PODBuffer<T where Validator> provides Some {
    field podbuffer_value: String;
}

//<summary>Primitive GUID value.</summary>
entity GUID provides KeyType, POD, Some {
    field guid_value: String;
}

//<summary>Primitive regex value.</summary>
entity Regex provides Some {
    field regex_value: String;

    method match(str: String, start?: Int, end?: Int): { start: Int, end: Int }? # regex_match

    //
    //TODO: this is pretty boring right now
    //
}

//<summary>All actual tuples implicitly provide this concept.</summary>
concept Tuple provides KeyType, Some {
}

//<summary>All actual POD tuples implicitly provide this concept.</summary>
concept PODTuple provides KeyType, POD, Tuple {
}

//<summary>All actual records implicitly provide this concept.</summary>
concept Record provides KeyType, Some {
}

//<summary>All actual POD records implicitly provide this concept.</summary>
concept PODRecord provides KeyType, POD, Record {
}

//<summary>All actual arrays implicitly provide this concept.</summary>
concept Array provides Some {
    static length(a: Array): Int # array_length
}

//<summary>All actual POD arrays implicitly provide this concept.</summary>
concept PODArray provides POD, Array {
}

//<summary>All actual entities/concepts implicitly provide this concept.</summary>
concept Object provides Some {
}

//<summary>All actual enums implicitly provide this.</summary>
concept Enum provides KeyType, POD, Some {
}

//<summary>All actual custom keys implicitly provide this.</summary>
concept IdKey provides KeyType, POD, Some {
}

//<summary>Providing this concept allows for an entity to be compared or stored in a key based container using the key field.</summary>
concept Keyed<T where KeyType> provides Indexable, Any {
    field keyed_key: T;
}

//<summary>A lightweight tagging class for values.</summary>
entity Tagged<T where KeyType, U> provides Keyed<T>, Any {
    field tagged_value: U;
}
