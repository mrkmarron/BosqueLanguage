//<summary>An efficient buffer encoding for data.</summary>
entity PODReadBuffer provides Object, UniquenessTypeable{
    static fromBuffer<T where PODType>(data: Buffer<T>): *PODReadBuffer # podreadbuffer_frombuffer
    static fromStringOf<T where PODType(data: StringOf<T>): *PODReadBuffer # podreadbuffer_fromstringof
    static fromString(data: String): *PODReadBuffer # podreadbuffer_fromstring

    static read<T where PODType>(ref *buf: PODReadBuffer): T # podreadbuffer_read
    static tryRead<T where PODType>(ref *buf: PODReadBuffer): Result<T, String> # podreadbuffer_tryread

    static isTupleStart(^buf: PODReadBuffer): Bool # podreadbuffer_istuplestart
    static isTupleEnd(^buf: PODReadBuffer): Bool # podreadbuffer_istupleend
    static tryReadTupleStart(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadtuplestart
    static tryReadTupleEntry(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadtupleentry
    static tryReadTupleEnd(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadtupleend
    static recursive? readTupleAction<T where PODTuple>(ref *buf: PODReadBuffer, f: recursive? fn(ref *_: PODReadBuffer) -> PODType): T # podreadbuffer_readtupleaction

    static isRecordStart(^buf: PODReadBuffer): Bool # podreadbuffer_isrecordstart
    static isRecordEnd(^buf: PODReadBuffer): Bool # podreadbuffer_isrecordend
    static tryReadRecordStart(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadrecordstart
    static tryReadRecordKey(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadrecordkey //--------------next read is a string which was the property name
    static tryReadRecordValue(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadrecordvalue
    static tryReadRecordEnd(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadrecordend
    static recursive? readRecordAction<T where PODRecord>(ref *buf: PODReadBuffer, f: recursive? fn(ref *_: PODReadBuffer) -> PODType): T # podreadbuffer_readrecordaction

    static isArrayStart(^buf: PODReadBuffer): Bool # podreadbuffer_isarraystart
    static isArrayEnd(^buf: PODReadBuffer): Bool # podreadbuffer_isarrayend
    static tryReadArrayStart(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadarraystart
    static tryReadArrayEntry(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadarrayentry
    static tryReadArrayEnd(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadarrayend
    static recursive? readArrayAction<T>(ref *buf: PODReadBuffer, f: recursive? fn(ref *_: PODReadBuffer) -> T): List<T> # podreadbuffer_readarrayaction

    static isKVStoreStart(^buf: PODReadBuffer): Bool # podreadbuffer_iskvstorestart
    static isKVStoreEnd(^buf: PODReadBuffer): Bool # podreadbuffer_iskvstoreend
    static tryReadKVStoreStart(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadkvstorestart
    static tryReadKVStoreKey(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadkvstorekey
    static tryReadKVStoreValue(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadkvstorevalue
    static tryReadKVStoreEnd(ref *buf: PODReadBuffer): Bool # podreadbuffer_tryreadkvstoreend
    static recursive? readKVStoreAction<K where Indexable, V>(ref *buf: PODReadBuffer, f: recursive? fn(ref *_: PODReadBuffer) -> MapEntry<K, V>): Map<K, V> # podreadbuffer_readkvstoreaction
}

//<summary>An efficient buffer encoding for data.</summary>
entity PODWriteBuffer provides Object, UniquenessTypeable {
    static create(format?: BufferFormat, encoding?: BufferEncoding, compression?: BufferCompression): *PODWriteBuffer # podwritebuffer_create
    static complete<T where PODType>(*buf: PODWriteBuffer): Buffer<T> # podwritebuffer_complete

    static write<T where PODType>(ref *buf: PODWriteBuffer, data: T): None # podwritebuffer_write

    static writeTupleStart(ref *buf: PODWriteBuffer): None # podwritebuffer_writetuplestart
    static writeTupleEntry(ref *buf: PODWriteBuffer): None # podwritebuffer_writetupleentry
    static writeTupleEnd(ref *buf: PODWriteBuffer): None # podwritebuffer_writetupleend
    static recursive? writeTupleAction<T where PODTuple>(ref *buf: PODWriteBuffer, t: T, f: recursive? fn(_: PODType, ref *_: PODWriteBuffer) -> None): None # podwritebuffer_writetupleaction

    static writeRecordStart(ref *buf: PODWriteBuffer): None # podwritebuffer_writerecordstart
    static writeRecordKey(ref *buf: PODWriteBuffer): None # podwritebuffer_writerecordkey //--------------next write is a string which is used as the record property
    static writeRecordValue(ref *buf: PODWriteBuffer): None # podwritebuffer_writerecordvalue
    static writeRecordEnd(ref *buf: PODWriteBuffer): None # podwritebuffer_writerecordend
    static recursive? writeRecordAction<T where PODRecord>(ref *buf: PODWriteBuffer, r: T, f: recursive? fn(_: PODType, ref* _: PODWriteBuffer) -> None): None # podwritebuffer_writerecordaction

    static writeArrayStart(ref *buf: PODWriteBuffer): None # podwritebuffer_writearraystart
    static writeArrayEntry(ref *buf: PODWriteBuffer): None # podwritebuffer_writearrayentry
    static writeArrayEnd(ref *buf: PODWriteBuffer): None # podwritebuffer_writearrayend
    static recursive? writeArrayAction<T>(ref *buf: PODWriteBuffer, l: List<T>, f: recursive? fn(_: T, ref *_: PODWriteBuffer) -> None): None # podwritebuffer_writearrayaction

    static writeKVStoreStart(ref *buf: PODWriteBuffer): None # podwritebuffer_writekvstorestart
    static writeKVStoreKey(ref *buf: PODWriteBuffer): None # podwritebuffer_writekvstorekey
    static writeKVStoreValue(ref *buf: PODWriteBuffer): None # podwritebuffer_writekvstorevalue
    static writeKVStoreEnd(ref *buf: PODWriteBuffer): None # podwritebuffer_writekvstoreend
    static recursive? writeKVStoreAction<K where Indexable, V>(ref *buf: PODWriteBuffer, m: Map<K, V>, f: recursive? fn(_: MapEnty<K, V>, ref *_: None) -> None): None # podwritebuffer_writekvstoreaction
}

//<summary>An efficient buffer encoding for data.</summary>
entity APIReadBuffer provides Object, UniquenessTypeable {
    static fromBuffer<T where APIType>(data: Buffer<T>): *PODReadBuffer # apireadbuffer_frombuffer
    static fromStringOf<T where APIType(data: StringOf<T>): *PODReadBuffer # apireadbuffer_fromstringof
    static fromString(data: String): *APIReadBuffer # apireadbuffer_fromstring

    static read<T where APIType>(ref *buf: APIReadBuffer): T # apireadbuffer_read
    static tryRead<T where APIType>(ref *buf: APIReadBuffer): Result<T, String> # apireadbuffer_tryread

    static isTupleStart(^buf: APIReadBuffer): Bool # apireadbuffer_istuplestart
    static isTupleEnd(^buf: APIReadBuffer): Bool # apireadbuffer_istupleend
    static tryReadTupleStart(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadtuplestart
    static tryReadTupleEntry(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadtupleentry
    static tryReadTupleEnd(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadtupleend
    static recursive? readTupleAction<T where APITuple>(ref *buf: APIReadBuffer, f: recursive? fn(ref *_: APIReadBuffer) -> APIType): T # apireadbuffer_readtupleaction

    static isRecordStart(^buf: APIReadBuffer): Bool # apireadbuffer_isrecordstart
    static isRecordEnd(^buf: APIReadBuffer): Bool # apireadbuffer_isrecordend
    static tryReadRecordStart(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadrecordstart
    static tryReadRecordKey(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadrecordkey //--------------next read is a string which was the property name
    static tryReadRecordValue(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadrecordvalue
    static tryReadRecordEnd(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadrecordend
    static recursive? readRecordAction<T where APIRecord>(ref *buf: APIReadBuffer, f: recursive? fn(ref *_: APIReadBuffer) -> APIType): T # apireadbuffer_readrecordaction

    static isArrayStart(^buf: APIReadBuffer): Bool # apireadbuffer_isarraystart
    static isArrayEnd(^buf: APIReadBuffer): Bool # apireadbuffer_isarrayend
    static tryReadArrayStart(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadarraystart
    static tryReadArrayEntry(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadarrayentry
    static tryReadArrayEnd(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadarrayend
    static recursive? readArrayAction<T>(ref *buf: APIReadBuffer, f: recursive? fn(ref *_: APIReadBuffer) -> T): List<T> # apireadbuffer_readarrayaction

    static isKVStoreStart(^buf: APIReadBuffer): Bool # apireadbuffer_iskvstorestart
    static isKVStoreEnd(^buf: APIReadBuffer): Bool # apireadbuffer_iskvstoreend
    static tryReadKVStoreStart(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadkvstorestart
    static tryReadKVStoreKey(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadkvstorekey
    static tryReadKVStoreValue(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadkvstorevalue
    static tryReadKVStoreEnd(ref *buf: APIReadBuffer): Bool # apireadbuffer_tryreadkvstoreend
    static recursive? readKVStoreAction<K where Indexable, V>(ref *buf: APIReadBuffer, f: recursive? fn(ref *_: APIReadBuffer) -> MapEntry<K, V>): Map<K, V> # apireadbuffer_readkvstoreaction
}

//<summary>An efficient buffer encoding for data.</summary>
entity APIWriteBuffer provides Object, UniquenessTypeable {
    static create(format?: BufferFormat, encoding?: BufferEncoding, compression?: BufferCompression): *APIWriteBuffer # apiwritebuffer_create
    static complete<T where APIType>(*buf: APIWriteBuffer): Buffer<T> # apiwritebuffer_complete

    static write<T where APIType>(ref *buf: APIWriteBuffer, data: T): None # apiwritebuffer_write

    static writeTupleStart(ref *buf: APIWriteBuffer): None # apiwritebuffer_writetuplestart
    static writeTupleEntry(ref *buf: APIWriteBuffer): None # apiwritebuffer_writetupleentry
    static writeTupleEnd(ref *buf: APIWriteBuffer): None # apiwritebuffer_writetupleend
    static recursive? writeTupleAction<T where APITuple>(ref *buf: APIWriteBuffer, t: T, f: recursive? fn(_: APIType, ref *_: APIWriteBuffer) -> None): None # apiwritebuffer_writetupleaction

    static writeRecordStart(ref *buf: APIWriteBuffer): None # apiwritebuffer_writerecordstart
    static writeRecordKey(ref *buf: APIWriteBuffer): None # apiwritebuffer_writerecordkey //--------------next write is a string which is used as the record property
    static writeRecordValue(ref *buf: APIWriteBuffer): None # apiwritebuffer_writerecordvalue
    static writeRecordEnd(ref *buf: APIWriteBuffer): None # apiwritebuffer_writerecordend
    static recursive? writeRecordAction<T where APIRecord>(ref *buf: APIWriteBuffer, r: T, f: recursive? fn(_: APIType, ref* _: APIWriteBuffer) -> None): None # apiwritebuffer_writerecordaction

    static writeArrayStart(ref *buf: APIWriteBuffer): None # apiwritebuffer_writearraystart
    static writeArrayEntry(ref *buf: APIWriteBuffer): None # apiwritebuffer_writearrayentry
    static writeArrayEnd(ref *buf: APIWriteBuffer): None # apiwritebuffer_writearrayend
    static recursive? writeArrayAction<T>(ref *buf: APIWriteBuffer, l: List<T>, f: recursive? fn(_: T, ref *_: APIWriteBuffer) -> None): None # apiwritebuffer_writearrayaction

    static writeKVStoreStart(ref *buf: APIWriteBuffer): None # apiwritebuffer_writekvstorestart
    static writeKVStoreKey(ref *buf: APIWriteBuffer): None # apiwritebuffer_writekvstorekey
    static writeKVStoreValue(ref *buf: APIWriteBuffer): None # apiwritebuffer_writekvstorevalue
    static writeKVStoreEnd(ref *buf: APIWriteBuffer): None # apiwritebuffer_writekvstoreend
    static recursive? writeKVStoreAction<K where Indexable, V>(ref *buf: APIWriteBuffer, m: Map<K, V>, f: recursive? fn(_: MapEnty<K, V>, ref *_: None) -> None): None # apiwritebuffer_writekvstoreaction
}
