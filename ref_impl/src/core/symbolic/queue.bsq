//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace NSCore;

entity Queue<T> provides Object {
    hidden static _size(q: Queue<T>): Int # queue_size
    hidden static _unsafe_front(q: Queue<T>): T # queue_unsafe_front
    hidden static _unsafe_at(q: Queue<T>, idx: Int): T # queue_unsafe_at
    hidden static _unsafe_push(q: Queue<T>, v: T): Queue<T> # queue_unsafe_push
    hidden static _unsafe_pop(q: Queue<T>): Queue<T> # queue_unsafe_pop

    hidden static _toList(q: Queue<T>, lp: List<T>, idx: Int): List<T> {
        if(idx == Queue<T>::_size(q)) {
            return lp;
        }
        else {
            let val = Queue<T>::_unsafe_at(q, idx);
            return Queue<T>::_toList(q, List<T>::_unsafe_push(lp, val), idx + 1);
        }
    }

    method size(): Int {
        return Queue<T>::_size(this);
    }

    method empty(): Bool {
        return Queue<T>::_size(this) == 0;
    }

    method toList(): List<T> {
        return Queue<T>::_toList(this, List<T>@{}, 0);
    }

    method dequeue(): T, Queue<T>
        requires release Queue<T>::_size(this) != 0;
    {
        return Queue<T>::_unsafe_front(this), Queue<T>::_unsafe_pop(this);
    }

    static idequeue(ref q: Queue<T>): T 
        requires release Queue<T>::_size(q) != 0;
    {
        let res = Queue<T>::_unsafe_front(this);
        q = Queue<T>::_unsafe_pop(q);

        return res;
    }

    method peek(): T
        requires release Queue<T>::_size(this) != 0;
    {
        return Queue<T>::_unsafe_front(this);
    }

    method tryPeek(): T? {
        return Queue<T>::_size(this) != 0 ? Queue<T>::_unsafe_front(this) : none;
    }

    method lookahead(k: Int): T
        requires release k < Queue<T>::_size(this);
    {
        return Queue<T>::_unsafe_at(this, k);
    }

    method tryLookahead(k: Int): T? {
        return k < Queue<T>::_size(this) ? Queue<T>::_unsafe_at(this, k) : none;
    }

    method rest(): Queue<T>
        requires release Queue<T>::_size(this) != 0;
    {
        return Queue<T>::_unsafe_pop(this);
    }

    static irest(ref q: Queue<T>)
        requires release Queue<T>::_size(q) != 0;
    {
        q = Queue<T>::_unsafe_pop(q);
        return none;
    }

    method enqueue(v: T): Queue<T> {
        return Queue<T>::_unsafe_push(this, v);
    }

    static ienqueue(ref q: Queue<T>, v: T) {
        q = Queue<T>::_unsafe_push(q, v);
        return none;
    }

}
